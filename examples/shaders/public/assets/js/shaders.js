var vert = "#define GLSLIFY 1\nvarying vec2 vUv;\nvarying vec3 vNorm;\n\nvoid main() {\n    vUv = uv;\n    vNorm = position.xyz;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"; // eslint-disable-line

var frag = "#define GLSLIFY 1\n// Based on https://github.com/mattdesl/three-glslify-example by mattdesl\n\nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D texture;\n\nvarying vec2 vUv;\nvarying vec3 vNorm;\n\n#define TEXEL_SIZE 1.0 / 512.0\n\nvec3 sample(vec2 uv);\nhighp float random(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n#ifndef TAU\n  #define TAU 6.28318530718\n#endif\n\n//Use last part of hash function to generate new random radius and angle\nvec2 mult(inout vec2 r) {\n  r = fract(r * vec2(12.9898,78.233));\n  return sqrt(r.x + .001) * vec2(sin(r.y * TAU), cos(r.y * TAU));\n}\n\nvec3 blur(vec2 uv, float radius, float aspect, float offset) {\n  vec2 circle = vec2(radius);\n  circle.x *= aspect;\n  vec2 rnd = vec2(random(vec2(uv + offset)));\n\n  vec3 acc = vec3(0.0);\n  for (int i = 0; i < 10; i++) {\n    acc += sample(uv + circle * mult(rnd)).xyz;\n  }\n  return acc / float(10);\n}\n\nvec3 blur(vec2 uv, float radius, float aspect) {\n  return blur(uv, radius, aspect, 0.0);\n}\n\nvec3 blur(vec2 uv, float radius) {\n  return blur(uv, radius, 1.0);\n}\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat aastep(float threshold, float value) {\n  #ifdef GL_OES_standard_derivatives\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n  #else\n    return step(threshold, value);\n  #endif  \n}\n\nvec3 halftone(vec3 texcolor, vec2 st, float frequency) {\n  float n = 0.1*snoise(st*200.0); // Fractal noise\n  n += 0.05*snoise(st*400.0);\n  n += 0.025*snoise(st*800.0);\n  vec3 white = vec3(n*0.2 + 0.97);\n  vec3 black = vec3(n + 0.1);\n\n  // Perform a rough RGB-to-CMYK conversion\n  vec4 cmyk;\n  cmyk.xyz = 1.0 - texcolor;\n  cmyk.w = min(cmyk.x, min(cmyk.y, cmyk.z)); // Create K\n  cmyk.xyz -= cmyk.w; // Subtract K equivalent from CMY\n\n  // Distance to nearest point in a grid of\n  // (frequency x frequency) points over the unit square\n  vec2 Kst = frequency*mat2(0.707, -0.707, 0.707, 0.707)*st;\n  vec2 Kuv = 2.0*fract(Kst)-1.0;\n  float k = aastep(0.0, sqrt(cmyk.w)-length(Kuv)+n);\n  vec2 Cst = frequency*mat2(0.966, -0.259, 0.259, 0.966)*st;\n  vec2 Cuv = 2.0*fract(Cst)-1.0;\n  float c = aastep(0.0, sqrt(cmyk.x)-length(Cuv)+n);\n  vec2 Mst = frequency*mat2(0.966, 0.259, -0.259, 0.966)*st;\n  vec2 Muv = 2.0*fract(Mst)-1.0;\n  float m = aastep(0.0, sqrt(cmyk.y)-length(Muv)+n);\n  vec2 Yst = frequency*st; // 0 deg\n  vec2 Yuv = 2.0*fract(Yst)-1.0;\n  float y = aastep(0.0, sqrt(cmyk.z)-length(Yuv)+n);\n\n  vec3 rgbscreen = 1.0 - 0.9*vec3(c,m,y) + n;\n  return mix(rgbscreen, black, 0.85*k + 0.3*n);\n}\n\nvec3 halftone(vec3 texcolor, vec2 st) {\n  return halftone(texcolor, st, 30.0);\n}\n\nfloat checker(vec2 uv, float repeats) {\n  float cx = floor(repeats * uv.x);\n  float cy = floor(repeats * uv.y); \n  float result = mod(cx + cy, 2.0);\n  return sign(result);\n}\n\nvec3 sample(vec2 uv) {\n    return texture2D(texture, uv).rgb;\n}\n\nvoid main() {\n    // the checker box\n    vec3 colorA = vNorm * 0.5 + 0.5;\n    colorA += vec3(checker(vUv, 15.0)) * 0.05;\n\n    // our texture with halftone + hash blur\n    float dist = length(vUv - 0.5);\n    float falloff = smoothstep(0.3, 0.7, dist);\n    float radius = TEXEL_SIZE * 40.0;\n    radius *= falloff;\n    vec3 colorB = blur(vUv, radius, 1.0);\n    falloff = smoothstep(0.5, 0.0, dist);\n    colorB = mix(colorB, halftone(colorB, vUv, 35.0), falloff);\n\n    // mix the two\n    float blend = smoothstep(0.0, 0.7, vNorm.z);\n    gl_FragColor.rgb = mix(colorA, colorB, blend);\n    gl_FragColor.a = 1.0;\n}\n"; // eslint-disable-line

/**
 * Alien.js Example Shaders Module.
 *
 * @author Patrick Schroen / https://github.com/pschroen
 */

export { vert, frag };
